use super::*;

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Encryptor<T: BlockCipherInit + BlockCipher>
where
    [(); T::BLOCK_SIZE]:,
{
    engine: T,
    iv: [u8; T::BLOCK_SIZE],
}
impl<T: BlockCipherInit + BlockCipher> Encryptor<T>
where
    [(); T::BLOCK_SIZE]:,
{
    #[inline]
    pub fn new(key: &[u8], iv: Option<&[u8; T::BLOCK_SIZE]>) -> Result<Self, ErrorCode> {
        Ok(Self {
            engine: T::new(key)?,
            iv: match iv {
                None => [0u8; T::BLOCK_SIZE],
                Some(&data) => data,
            },
        })
    }
}
impl<T: BlockCipherInit + BlockCipher> Encrypt for Encryptor<T>
where
    [(); T::BLOCK_SIZE]:,
{
    fn encrypt(mut self, plain_text: &[u8], cipher_text: &mut [u8]) -> Result<(), ErrorCode> {
        if plain_text.len() % T::BLOCK_SIZE != 0 {
            return Err(ErrorCode::InvalidArgument);
        }

        if cipher_text.len() < plain_text.len() {
            return Err(ErrorCode::InsufficientMemory);
        }

        for i in (0..plain_text.len()).step_by(T::BLOCK_SIZE) {
            self.engine.encrypt_block_in_place(&mut self.iv);

            self.iv
                .iter_mut()
                .zip(plain_text[i..i + T::BLOCK_SIZE].iter())
                .for_each(|(a, &plain)| *a ^= plain);

            cipher_text[i..i + T::BLOCK_SIZE].clone_from_slice(&self.iv);
        }

        Ok(())
    }
}
impl<T: BlockCipherInit + BlockCipher> Drop for Encryptor<T>
where
    [(); T::BLOCK_SIZE]:,
{
    fn drop(&mut self) {
        self.iv.fill(0);
    }
}

#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct Decryptor<T: BlockCipherInit + BlockCipher>
where
    [(); T::BLOCK_SIZE]:,
{
    engine: T,
    iv: [u8; T::BLOCK_SIZE],
}
impl<T: BlockCipherInit + BlockCipher> Decryptor<T>
where
    [(); T::BLOCK_SIZE]:,
{
    #[inline]
    pub fn new(key: &[u8], iv: Option<&[u8; T::BLOCK_SIZE]>) -> Result<Self, ErrorCode> {
        Ok(Self {
            engine: T::new(key)?,
            iv: match iv {
                None => [0u8; T::BLOCK_SIZE],
                Some(&data) => data,
            },
        })
    }
}
impl<T: BlockCipherInit + BlockCipher> Decrypt for Decryptor<T>
where
    [(); T::BLOCK_SIZE]:,
{
    fn decrypt(mut self, cipher_text: &[u8], plain_text: &mut [u8]) -> Result<(), ErrorCode> {
        if cipher_text.len() % T::BLOCK_SIZE != 0 {
            return Err(ErrorCode::InvalidArgument);
        }

        if plain_text.len() < cipher_text.len() {
            return Err(ErrorCode::InsufficientMemory);
        }

        for i in (0..cipher_text.len()).step_by(T::BLOCK_SIZE) {
            self.engine.encrypt_block_in_place(&mut self.iv);

            plain_text[i..i + T::BLOCK_SIZE]
                .iter_mut()
                .zip(self.iv.iter())
                .zip(cipher_text[i..i + T::BLOCK_SIZE].iter())
                .for_each(|((plain, &b), &c)| *plain = b ^ c);

            self.iv.clone_from_slice(&cipher_text[i..i + T::BLOCK_SIZE]);
        }

        Ok(())
    }
}
impl<T: BlockCipherInit + BlockCipher> Drop for Decryptor<T>
where
    [(); T::BLOCK_SIZE]:,
{
    fn drop(&mut self) {
        self.iv.fill(0);
    }
}

/// Test module
#[cfg(test)]
mod test {
    use super::{aes::*, *};

    #[test]
    fn error_handling() {
        let key = [0xAA; 32];
        let iv = [0xAA; 16];

        assert!(
            Encryptor::<Aes192>::new(&key, None)
                .is_err_and(|err| err == ErrorCode::InvalidArgument),
            "Key too long, initialization should have failed"
        );
        assert!(
            Decryptor::<Aes192>::new(&key, None)
                .is_err_and(|err| err == ErrorCode::InvalidArgument),
            "Key too long, initialization should have failed"
        );

        let plain_text = [0xAA; 32];
        let mut cipher_text = plain_text.clone();
        let encryptor = Encryptor::<Aes256>::new(&key, None).expect("Key buffer is valid");
        let result = encryptor.encrypt(&plain_text[0..15], &mut cipher_text);
        assert!(
            result.is_err_and(|err| err == ErrorCode::InvalidArgument),
            "Plain text length is not divisible by block length, encryption should have failed"
        );
        assert_eq!(
            cipher_text, plain_text,
            "Nothing has been written to output buffer"
        );

        let cipher_text = [0xAA; 32];
        let mut plain_text = cipher_text.clone();
        let decryptor = Decryptor::<Aes256>::new(&key, None).expect("Key buffer is valid");
        let result = decryptor.decrypt(&cipher_text[0..15], &mut plain_text);
        assert!(
            result.is_err_and(|err| err == ErrorCode::InvalidArgument),
            "Plain text length is not divisible by block length, encryption should have failed"
        );
        assert_eq!(
            plain_text, cipher_text,
            "Nothing has been written to output buffer"
        );

        let encryptor = Encryptor::<Aes256>::new(&key, None).expect("Key buffer is valid");
        assert_eq!(encryptor.iv, [0u8; 16]);
        let encryptor = Encryptor::<Aes256>::new(&key, Some(&iv)).expect("Key buffer is valid");
        assert_eq!(encryptor.iv, iv);

        let decryptor = Decryptor::<Aes256>::new(&key, None).expect("Key buffer is valid");
        assert_eq!(decryptor.iv, [0u8; 16]);
        let decryptor = Decryptor::<Aes256>::new(&key, Some(&iv)).expect("Key buffer is valid");
        assert_eq!(decryptor.iv, iv);
    }

    #[test]
    fn correctness() {
        let mut buffer = [0u8; 160];

        // AES-128
        let key = [
            0x7c, 0xb8, 0x1f, 0xc4, 0xb2, 0x03, 0xb0, 0xfa, 0x9b, 0xec, 0x49, 0x75, 0x9b, 0xd5,
            0x15, 0xc2,
        ];
        let iv = [
            0x4d, 0x5e, 0x2f, 0xa3, 0xbf, 0x73, 0xf4, 0x88, 0xb3, 0xe7, 0xe1, 0x25, 0xf0, 0x3d,
            0xfb, 0xbe,
        ];
        let plain_text = [
            0x36, 0x27, 0x89, 0xb3, 0x76, 0xd8, 0x5e, 0xb8, 0x18, 0x1d, 0x4e, 0xee, 0xa5, 0x2d,
            0x42, 0xe8, 0x73, 0xce, 0x77, 0x41, 0xc1, 0x1a, 0x2f, 0x82, 0x03, 0x83, 0xa7, 0x45,
            0x7b, 0x15, 0x48, 0x9b, 0x09, 0xfb, 0x21, 0xac, 0x44, 0x45, 0x95, 0x9d, 0xc9, 0xe8,
            0x51, 0xb7, 0xd4, 0x06, 0x82, 0xc5, 0x0d, 0x70, 0x44, 0xbd, 0xa4, 0x6a, 0x5d, 0xa3,
            0x9f, 0xae, 0x2b, 0xab, 0x73, 0xb3, 0xdb, 0x9e, 0xd2, 0x2e, 0xdc, 0x7e, 0xc5, 0xda,
            0x93, 0x6d, 0xfa, 0x74, 0x51, 0xcb, 0x5f, 0x0a, 0x82, 0x9f, 0xf0, 0x76, 0x27, 0x38,
            0xcc, 0x26, 0x86, 0x14, 0x8f, 0x1e, 0x1f, 0x00, 0xdc, 0x3f, 0xe3, 0x81, 0x39, 0xc9,
            0xa1, 0x73, 0x20, 0x1f, 0xc1, 0xf0, 0x52, 0xca, 0x34, 0x73, 0x6f, 0xc1, 0xab, 0x3d,
            0xc4, 0xe7, 0x07, 0xf8, 0x64, 0xd6, 0x11, 0x9b, 0x7a, 0xdb, 0x6c, 0x8d, 0xdd, 0x41,
            0xc8, 0x0d, 0xe5, 0xd3, 0x57, 0xd1, 0x7e, 0x9c, 0x85, 0xed, 0x7a, 0xf1, 0xe4, 0xf7,
            0x2c, 0xb2, 0x65, 0x69, 0x32, 0xcc, 0xce, 0x46, 0x92, 0x02, 0x68, 0x01, 0x09, 0xee,
            0xf8, 0x9a, 0x9f, 0x42, 0xf1, 0x0a,
        ];
        let cipher_text = [
            0xac, 0x23, 0x25, 0x9f, 0x68, 0xd4, 0xf8, 0x26, 0x04, 0xca, 0xbd, 0x2e, 0x42, 0x37,
            0x82, 0x1c, 0x8b, 0x6c, 0x0a, 0xad, 0x0d, 0xfb, 0x11, 0x20, 0xb6, 0xb0, 0x57, 0x22,
            0x3c, 0x99, 0x4d, 0x62, 0xb5, 0xc6, 0xf6, 0x3a, 0x25, 0xed, 0xbb, 0x79, 0x7c, 0xd2,
            0x99, 0xf8, 0x1c, 0xcb, 0x86, 0xd5, 0x01, 0x34, 0xad, 0x26, 0x10, 0x78, 0x65, 0x14,
            0x20, 0x04, 0xc2, 0xd9, 0xd5, 0x2f, 0xe3, 0xf9, 0x1a, 0xcf, 0x7b, 0x9b, 0x81, 0x11,
            0xc8, 0xb4, 0xe1, 0x4b, 0x05, 0xb1, 0x73, 0x73, 0x0e, 0x7b, 0x81, 0x20, 0x36, 0x02,
            0x98, 0x46, 0xf1, 0xc1, 0xc6, 0xff, 0xb3, 0x0f, 0x6a, 0xbc, 0xfc, 0x3e, 0x1e, 0xa6,
            0x31, 0x48, 0x0e, 0x0d, 0x0b, 0xda, 0x10, 0x6b, 0xb8, 0x73, 0x19, 0xfd, 0xae, 0x09,
            0xa1, 0x1b, 0x89, 0xe8, 0xdd, 0xe6, 0x25, 0xd5, 0x3a, 0x19, 0xc6, 0x5a, 0xe5, 0x8f,
            0xbe, 0x3f, 0x4b, 0xcb, 0xc3, 0xc9, 0x9a, 0xf0, 0x5c, 0xb0, 0xa7, 0xcc, 0x4b, 0x79,
            0x3d, 0x8c, 0xdb, 0x1c, 0xfa, 0x31, 0x73, 0xed, 0xe5, 0x95, 0xc8, 0xc5, 0x61, 0xf9,
            0x2c, 0x3f, 0xe3, 0x63, 0x8b, 0x8d,
        ];
        let encryptor = Encryptor::<Aes128>::new(&key, Some(&iv)).expect("Key buffer is valid");
        let decryptor = Decryptor::<Aes128>::new(&key, Some(&iv)).expect("Key buffer is valid");
        buffer.fill(0);
        let result = encryptor.encrypt(&plain_text, &mut buffer);
        assert!(result.is_ok_and(|_| buffer == cipher_text));
        buffer.fill(0);
        let result = decryptor.decrypt(&cipher_text, &mut buffer);
        assert!(result.is_ok_and(|_| buffer == plain_text));

        // AES-192
        let key = [
            0xaf, 0xfe, 0x25, 0xa7, 0xb2, 0x8f, 0xe7, 0x42, 0x7a, 0xa6, 0x9a, 0x89, 0xcb, 0x87,
            0xbc, 0x0f, 0xb6, 0x8c, 0x94, 0x0d, 0x63, 0xd3, 0x19, 0xb3,
        ];
        let iv = [
            0x89, 0xe6, 0x12, 0xf7, 0x7e, 0xf5, 0x5e, 0xe8, 0x69, 0x35, 0xd9, 0x0a, 0x8c, 0x74,
            0x66, 0xc2,
        ];
        let plain_text = [
            0xb5, 0x71, 0x97, 0x02, 0x56, 0x0b, 0x8b, 0x21, 0x4c, 0x73, 0xb9, 0xa2, 0xea, 0x7a,
            0x43, 0x70, 0x7b, 0x10, 0xe0, 0xb7, 0x91, 0x52, 0xd1, 0x01, 0x9a, 0xc4, 0x17, 0x9f,
            0xb4, 0xda, 0xe3, 0x4a, 0xc3, 0xbe, 0x4e, 0x0a, 0xc0, 0x4d, 0x4a, 0x57, 0x54, 0x62,
            0xd8, 0x7e, 0xa5, 0x58, 0x7c, 0x47, 0x70, 0xca, 0xee, 0xd5, 0x58, 0x9d, 0x13, 0xcd,
            0x7d, 0x41, 0x2b, 0xbb, 0x51, 0x33, 0x4c, 0xb1, 0xa7, 0xc7, 0x0f, 0x31, 0x0d, 0x24,
            0x89, 0x4c, 0x5c, 0x90, 0x7d, 0x0c, 0x8d, 0xee, 0xcf, 0x10, 0xce, 0x84, 0x3c, 0x76,
            0xd5, 0x02, 0x49, 0xfe, 0x75, 0xc0, 0x79, 0x6b, 0x6f, 0x48, 0xc3, 0x2d, 0x8a, 0x14,
            0x43, 0x3e, 0xe6, 0x99, 0x30, 0x4a, 0x8d, 0x84, 0x0e, 0x12, 0x4b, 0x43, 0x25, 0x12,
            0xc0, 0xc7, 0x31, 0x61, 0xb3, 0x88, 0x5b, 0xda, 0xa9, 0xca, 0x68, 0x79, 0xb6, 0x1f,
            0x31, 0x07, 0x94, 0x2e, 0x53, 0xfa, 0xf2, 0xb2, 0x27, 0x97, 0x0e, 0xc6, 0xf5, 0x59,
            0x86, 0x5f, 0x64, 0x96, 0x6c, 0x1a, 0x35, 0x60, 0x98, 0x38, 0x31, 0xaa, 0x42, 0xe6,
            0x60, 0xab, 0xd0, 0xc2, 0x7c, 0x88,
        ];
        let cipher_text = [
            0x5b, 0xc9, 0x58, 0xb5, 0x94, 0xf0, 0xe4, 0x92, 0x8c, 0xee, 0x7c, 0x01, 0x9e, 0xe1,
            0x88, 0x4b, 0xab, 0x9b, 0x69, 0x56, 0xf4, 0x0c, 0x47, 0xf2, 0x4c, 0x1b, 0x8e, 0xf5,
            0x87, 0xd6, 0x8b, 0x17, 0x5d, 0xbc, 0x36, 0x22, 0x6b, 0x7d, 0x95, 0xe5, 0x73, 0x70,
            0x2f, 0x5b, 0x0d, 0xc9, 0x69, 0xa8, 0xc5, 0x9b, 0x82, 0x81, 0x67, 0x62, 0x84, 0x72,
            0x75, 0xc9, 0x52, 0x34, 0xe3, 0xc7, 0x4f, 0xba, 0x50, 0x84, 0x12, 0x02, 0xc2, 0x72,
            0x64, 0x13, 0x1a, 0xb0, 0x37, 0x73, 0xb4, 0xe2, 0x8e, 0xa7, 0xc6, 0x8e, 0xa9, 0x46,
            0xef, 0xe2, 0xe2, 0xd9, 0xa8, 0x96, 0x43, 0xd9, 0x8c, 0x5d, 0xdd, 0xd0, 0x75, 0x09,
            0x8a, 0x93, 0x0c, 0x74, 0x1b, 0x53, 0x5b, 0xa9, 0x6e, 0xa0, 0xa0, 0x8a, 0xd0, 0xcf,
            0x68, 0xd1, 0x1e, 0x8e, 0x98, 0xe2, 0x6d, 0x0a, 0x79, 0xd3, 0xa5, 0xef, 0x65, 0xdd,
            0x13, 0x7c, 0xc6, 0xc8, 0x2a, 0x4e, 0x8e, 0xdb, 0x1a, 0x63, 0xe9, 0xbc, 0x6e, 0x87,
            0x05, 0xce, 0xf5, 0x9b, 0x4b, 0x4c, 0x39, 0x19, 0x24, 0xff, 0xd3, 0x3a, 0xce, 0x99,
            0x80, 0x8c, 0xc1, 0x63, 0x27, 0x2d,
        ];
        let encryptor = Encryptor::<Aes192>::new(&key, Some(&iv)).expect("Key buffer is valid");
        let decryptor = Decryptor::<Aes192>::new(&key, Some(&iv)).expect("Key buffer is valid");
        buffer.fill(0);
        let result = encryptor.encrypt(&plain_text, &mut buffer);
        assert!(result.is_ok_and(|_| buffer == cipher_text));
        buffer.fill(0);
        let result = decryptor.decrypt(&cipher_text, &mut buffer);
        assert!(result.is_ok_and(|_| buffer == plain_text));

        // AES-256
        let key = [
            0x04, 0xc4, 0x49, 0x9a, 0x7a, 0x10, 0xa3, 0x19, 0x99, 0x22, 0x58, 0x72, 0x61, 0x91,
            0xf8, 0x08, 0x7a, 0xf1, 0x18, 0x2e, 0xbd, 0x48, 0xf4, 0x3b, 0xf6, 0xc1, 0x58, 0xdc,
            0xe8, 0xa5, 0xc0, 0xaf,
        ];
        let iv = [
            0x7f, 0xc2, 0x68, 0xd6, 0x59, 0x9f, 0xcd, 0xef, 0x74, 0x57, 0xcd, 0xbd, 0xe5, 0xb9,
            0xc5, 0xb6,
        ];
        let plain_text = [
            0x04, 0xa6, 0x60, 0x03, 0x96, 0x9b, 0xbe, 0x72, 0xee, 0xdb, 0x63, 0x8f, 0xb1, 0x88,
            0xbe, 0xa1, 0x56, 0x4d, 0x96, 0xdf, 0x87, 0x39, 0x94, 0xe2, 0xca, 0xcd, 0x02, 0x59,
            0x60, 0x53, 0xd2, 0xff, 0x6d, 0x72, 0xe2, 0xca, 0x5a, 0x00, 0x7e, 0x65, 0x78, 0x17,
            0x27, 0xe1, 0xe6, 0x6b, 0x92, 0xa8, 0xb4, 0xda, 0xf4, 0xb2, 0x48, 0x45, 0x7d, 0xfb,
            0x01, 0x9f, 0x22, 0x34, 0x1b, 0x43, 0xa0, 0xb8, 0xd3, 0x8b, 0xbe, 0xc3, 0xcb, 0x9e,
            0xd2, 0xde, 0xaf, 0x89, 0x86, 0x9e, 0x19, 0x92, 0xdc, 0x8e, 0xb2, 0xc8, 0x70, 0x6a,
            0x9b, 0xdf, 0xfe, 0x8e, 0x0b, 0x3b, 0x23, 0xad, 0x39, 0x4b, 0x68, 0xc6, 0x7c, 0x18,
            0x7c, 0x54, 0xb0, 0x1e, 0xc1, 0xc6, 0xdd, 0x5a, 0x0a, 0x2e, 0x13, 0xa4, 0xa4, 0x3d,
            0x98, 0x3f, 0x93, 0x6f, 0x46, 0xaf, 0x1d, 0x83, 0x2e, 0xca, 0x8d, 0x2e, 0x81, 0x12,
            0x31, 0x10, 0xb1, 0x42, 0xa5, 0xe7, 0xd3, 0x27, 0x53, 0x03, 0x48, 0xb1, 0x3b, 0xfa,
            0x9c, 0x4a, 0xf0, 0x9c, 0xae, 0x66, 0xe3, 0x29, 0x11, 0x5c, 0xe4, 0xc2, 0xb3, 0x74,
            0xe6, 0x1e, 0xbc, 0x41, 0x03, 0x7e,
        ];
        let cipher_text = [
            0x52, 0x35, 0x63, 0x98, 0x33, 0xe0, 0x22, 0xfa, 0x28, 0xab, 0x90, 0xd2, 0x82, 0x0a,
            0xbe, 0xc0, 0x7d, 0x2c, 0x31, 0x85, 0xa9, 0xc6, 0xe1, 0x76, 0x18, 0xb8, 0xb6, 0x8f,
            0xb2, 0x21, 0xbb, 0x5d, 0xb2, 0x42, 0xad, 0x18, 0xc5, 0x35, 0xd7, 0x69, 0x4d, 0x13,
            0x06, 0xec, 0x26, 0xaf, 0xdd, 0x45, 0x9a, 0x53, 0xbb, 0x46, 0x04, 0x85, 0x24, 0x9c,
            0x4f, 0x5f, 0xa7, 0x3d, 0x41, 0xa0, 0xd6, 0xcc, 0x56, 0x98, 0x89, 0x49, 0xf7, 0xad,
            0x82, 0x25, 0x9f, 0xe3, 0xa3, 0x22, 0x6f, 0x0b, 0xd8, 0xd4, 0x79, 0xf4, 0x0a, 0x2b,
            0xd3, 0x64, 0x00, 0x07, 0x59, 0x81, 0x20, 0x6f, 0x50, 0xf2, 0x68, 0xc9, 0x21, 0x33,
            0x8e, 0x91, 0x61, 0x3b, 0x3a, 0x3c, 0x0c, 0xee, 0x1c, 0x0f, 0xf6, 0xc4, 0xe1, 0xd3,
            0x0c, 0x4c, 0xa0, 0xf9, 0xa3, 0x11, 0xe9, 0x58, 0x6d, 0x9e, 0xd2, 0x9d, 0xcc, 0x87,
            0x6f, 0xd0, 0x9e, 0xb6, 0x40, 0x50, 0x23, 0xeb, 0xc1, 0x80, 0xc5, 0x63, 0x5d, 0x4c,
            0x79, 0x87, 0x28, 0x60, 0x80, 0x84, 0x7d, 0x3a, 0x74, 0xe9, 0xde, 0xea, 0xfa, 0xee,
            0xc0, 0x69, 0x7c, 0xa8, 0xdb, 0x75,
        ];
        let encryptor = Encryptor::<Aes256>::new(&key, Some(&iv)).expect("Key buffer is valid");
        let decryptor = Decryptor::<Aes256>::new(&key, Some(&iv)).expect("Key buffer is valid");
        buffer.fill(0);
        let result = encryptor.encrypt(&plain_text, &mut buffer);
        assert!(result.is_ok_and(|_| buffer == cipher_text));
        buffer.fill(0);
        let result = decryptor.decrypt(&cipher_text, &mut buffer);
        assert!(result.is_ok_and(|_| buffer == plain_text));
    }
}
